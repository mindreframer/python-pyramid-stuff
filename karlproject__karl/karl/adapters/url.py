# Copyright (C) 2008-2009 Open Society Institute
#               Thomas Moroz: tmoroz@sorosny.org
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License Version 2 as published
# by the Free Software Foundation.  You may not use, modify or distribute
# this program under any other version of the GNU General Public License.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

from pyramid.interfaces import IContextURL
from pyramid.interfaces import IRequest
from pyramid.traversal import resource_path
from pyramid.testing import DummyRequest
    
from zope.interface import implements

from karl.utils import get_setting

class OfflineContextURL(object):
    """
    This is an alternate implementation of IContextURL that doesn't depend on
    an HTTP request.  The motivation for this is we want to be able to run
    code that generates url's via resource_url calls but we're not in the context
    of an HTTP request.  The canonical example here is sending an email alert
    that is generated by mail-in.  The email alert uses resource_url to create
    links to send to the user via email but because we're calling it from
    mail-in, which is a console app, we don't have a request.
    
    Instead of relying on a request object to figure out our base url, we
    look up an ISettings utility and ask it for a setting called
    'offline_app_url', which is the base url for this Karl instance.
    """
    implements(IContextURL)
    
    def __init__(self, model, request):
        self.model = model
        # Ignores request
        
    def virtual_root(self):
        # Not called by resource_url
        # XXX Should implement anyway, but not entirely sure what the expected
        #     return value is.  Is it a full url, or relative to the host?
        raise NotImplementedError
    
    def __call__(self):
        app_url = get_setting(self.model, 'offline_app_url')
        if not app_url:
            raise ValueError('offline_app_url is not set')
        if app_url.endswith('/'):
            app_url = app_url[:-1]
        path = resource_path(self.model)
        return app_url + path

class OfflineRequest(DummyRequest):
    """
    Use this in places where you don't have an HTTP request to get alternate
    registration of IContextURL.
    """
    implements(IRequest)
    
